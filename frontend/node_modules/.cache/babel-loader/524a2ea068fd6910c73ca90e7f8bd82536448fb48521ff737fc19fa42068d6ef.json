{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tejasw\\\\Desktop\\\\project\\\\frontend\\\\src\\\\components\\\\Formfield.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Formfield = _ref => {\n  _s();\n  let {\n    type,\n    name,\n    label,\n    error,\n    options\n  } = _ref;\n  const [height, setHeight] = useState(\"auto\");\n  const [passwordType, setpasswordType] = useState('password');\n  function toggle(event) {\n    if (passwordType === 'password') setpasswordType('text');else setpasswordType('password');\n  }\n  function handleInput(event) {\n    const elem = event.target;\n    elem.style.height = height;\n    if (elem.scrollHeight > elem.clientHeight) {\n      setHeight(prev => `auto`);\n      setHeight(prev => `${elem.scrollHeight}px`);\n    }\n  }\n  if (type === 'button') return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"formfield\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      name: name,\n      id: name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 17\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"formfield\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: name,\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this), [\"text\", \"number\", \"email\"].includes(type) && /*#__PURE__*/_jsxDEV(\"input\", {\n      type: type,\n      name: name,\n      id: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 56\n    }, this), type === 'textarea' && /*#__PURE__*/_jsxDEV(\"textarea\", {\n      name: name,\n      id: name,\n      onInput: event => handleInput(event)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 31\n    }, this), type === 'password' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: passwordType,\n        name: name,\n        id: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"toggle\",\n        onClick: event => toggle(event),\n        children: passwordType === 'password' ? /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"Show Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 100\n        }, this) : /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"Hide Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 131\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), type === 'select' && /*#__PURE__*/_jsxDEV(\"select\", {\n      name: name,\n      id: name,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        selected: true,\n        default: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option.toLowerCase(),\n        children: option\n      }, option, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(Formfield, \"iT5M2YMes8PtzggrWwM5bs7SaBU=\");\n_c = Formfield;\nexport default Formfield;\nvar _c;\n$RefreshReg$(_c, \"Formfield\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Formfield","_ref","_s","type","name","label","error","options","height","setHeight","passwordType","setpasswordType","toggle","event","handleInput","elem","target","style","scrollHeight","clientHeight","prev","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","includes","onInput","onClick","value","selected","default","map","option","toLowerCase","_c","$RefreshReg$"],"sources":["C:/Users/Tejasw/Desktop/project/frontend/src/components/Formfield.jsx"],"sourcesContent":["import React, { useState } from 'react'\r\n\r\nconst Formfield = ({type, name, label, error, options}) => {\r\n\r\n    const [height, setHeight] = useState(\"auto\")\r\n\r\n    const [passwordType, setpasswordType] = useState('password')\r\n    function toggle(event){\r\n        if (passwordType==='password') setpasswordType('text'); else setpasswordType('password')\r\n    }\r\n\r\n    function handleInput(event){\r\n        const elem = event.target\r\n        elem.style.height = height\r\n        if(elem.scrollHeight > elem.clientHeight){\r\n            setHeight(prev => `auto`)\r\n            setHeight(prev => `${elem.scrollHeight}px`)\r\n        }\r\n    }\r\n\r\n    if(type==='button')\r\n        return (<div className=\"formfield\">\r\n            <button type=\"submit\" name={name} id={name}>{label}</button>\r\n            </div>)\r\n  return (\r\n    <div className=\"formfield\">\r\n        <label htmlFor={name}>\r\n            <h3>{label}</h3>\r\n        </label>\r\n        {[\"text\", \"number\", \"email\"].includes(type) && <input type={type} name={name} id={name}></input>}\r\n        {type==='textarea' && <textarea name={name} id={name} onInput={(event)=>handleInput(event)}></textarea>}\r\n        {type==='password' && \r\n        <>\r\n            <input type={passwordType} name={name} id={name}/>\r\n            <span className=\"toggle\" onClick={(event)=>toggle(event)}>{passwordType==='password' ? <small>Show Password</small> : <small>Hide Password</small>}</span>\r\n        </>}\r\n        {type==='select' && <select name={name} id={name}>\r\n            <option value=\"\" selected default></option>\r\n            {options.map(option=>\r\n                <option value={option.toLowerCase()} key={option}>{option}\r\n                </option>\r\n            )}\r\n        </select>}\r\n        <div className=\"error\">{error}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Formfield"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}